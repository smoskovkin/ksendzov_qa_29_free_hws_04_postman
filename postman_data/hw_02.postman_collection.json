{
	"info": {
		"_postman_id": "e3e72399-a505-4888-9bad-996d30bb78a3",
		"name": "hw_02",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21054009"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"const responseData = pm.response.json()\r",
							"\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"NAME in Response is equal Sergei\", function () {\r",
							"    pm.expect(responseData.name).to.equal(\"Sergei\")\r",
							"});\r",
							"\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"AGE in Response is equal 40\", function () {\r",
							"    pm.expect(responseData.age).to.equal(\"40\")\r",
							"});\r",
							"\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"SALARY in Response is equal 2000\", function () {\r",
							"    pm.expect(responseData.salary).to.equal(2000)\r",
							"});\r",
							"\r",
							"\r",
							"//7. Спарсить request.\r",
							"const requestData = request.data;\r",
							"\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"В ответе и запросе значения свойств NAME равны\", function () {\r",
							"    pm.expect(responseData.name).to.equal(requestData.name)\r",
							"});\r",
							"\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"В ответе и запросе значения свойств AGE равны\", function () {\r",
							"    pm.expect(responseData.age).to.equal(requestData.age)\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"В ответе и запросе значения свойств SALARY равны\", function () {\r",
							"    pm.expect(responseData.salary).to.equal(Number(requestData.salary))\r",
							"});\r",
							"\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(responseData.family)\r",
							"\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"В ответе значение свойства U_SALARY_1_5_YEAR равно значению свойства SALARY*4 в запросе\", function () {\r",
							"    pm.expect(responseData.family.u_salary_1_5_year).to.equal(Number(requestData.salary) * 4)\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Sergei",
							"type": "text"
						},
						{
							"key": "age",
							"value": "40",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"const responseData = pm.response.json()\r",
							"\r",
							"\r",
							"//4. Спарсить request.\r",
							"const requestData = pm.request.url.query.toObject()\r",
							"\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"В ответе и запросе значения свойств NAME равны\", function () {\r",
							"    pm.expect(responseData.name).to.equal(requestData.name)\r",
							"});\r",
							"\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"В ответе и запросе значения свойств AGE равны\", function () {\r",
							"    pm.expect(responseData.age).to.equal(requestData.age)\r",
							"});\r",
							"\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"В ответе и запросе значения свойств SALARY равны\", function () {\r",
							"    pm.expect(responseData.salary).to.equal(Number(requestData.salary))\r",
							"});\r",
							"\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(responseData.family)\r",
							"\r",
							"\r",
							"let propertyDog = responseData.family.pets.dog\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Свойство DOG содержит свойство NAME\", function () {\r",
							"    pm.expect(propertyDog).to.have.property('name')\r",
							"})\r",
							"\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Свойство DOG содержит свойство AGE\", function () {\r",
							"    pm.expect(propertyDog).to.have.property('age')\r",
							"})\r",
							"\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Свойство NAME у свойства DOG имеет значение Luky\", function () {\r",
							"    pm.expect(propertyDog.name).to.equal('Luky')\r",
							"})\r",
							"\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Свойство AGE у свойства DOG имеет значение 4\", function () {\r",
							"    pm.expect(propertyDog.age).to.equal(4)\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Sergei&age=40&salary=2000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Sergei"
						},
						{
							"key": "age",
							"value": "40"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"const responseData = pm.response.json()\r",
							"\r",
							"\r",
							"//4. Спарсить request.\r",
							"const requestData = pm.request.url.query.toObject()\r",
							"\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"В ответе и запросе значения свойств NAME равны\", function () {\r",
							"    pm.expect(responseData.name).to.equal(requestData.name)\r",
							"})\r",
							"\r",
							"\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"В ответе и запросе значения свойств AGE равны\", function () {\r",
							"    pm.expect(responseData.age).to.equal(Number(requestData.age))\r",
							"})\r",
							"\r",
							"const requestSalary = requestData.salary\r",
							"const responseSalary = responseData.salary\r",
							"const responseSalary_0 = responseData.salary[0]\r",
							"const responseSalary_1 = responseData.salary[1]\r",
							"const responseSalary_2 = responseData.salary[2]\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(`Значение свойства SALARY в запросе: ${requestSalary}`)  \r",
							"\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(`Значение свойства SALARY в ответе: ${responseSalary}`)\r",
							"\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(`Значение свойства SALARY[0] в ответе: ${responseSalary_0}`)\r",
							"\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(`Значение свойства SALARY[1] в ответе: ${responseSalary_1}`)\r",
							"\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(`Значение свойства SALARY[2] в ответе: ${responseSalary_2}`)\r",
							"\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"В ответе значение свойства SALARY[0] равно значению свойства SALARY в запросе\", function () {\r",
							"    pm.expect(responseSalary_0).to.equal(Number(requestSalary))\r",
							"})\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"В ответе значение свойства SALARY[1] равно значению свойства SALARY*2 в запросе\", function () {\r",
							"    pm.expect(responseSalary_1).to.equal((requestSalary * 2).toString())\r",
							"})\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"В ответе значение свойства SALARY[2] равно значению свойства SALARY*3 в запросе\", function () {\r",
							"    pm.expect(responseSalary_2).to.equal((requestSalary * 3).toString())\r",
							"})\r",
							"\r",
							"\r",
							"//15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\");\r",
							"\r",
							"\r",
							"//16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\")\r",
							"\r",
							"\r",
							"//17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\")\r",
							"\r",
							"\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", requestData.name)\r",
							"\r",
							"\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", requestData.age)\r",
							"\r",
							"\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", requestData.salary)\r",
							"\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"responseData.salary.forEach((element) => console.log(element))\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Sergei&age=40&salary=2000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Sergei"
						},
						{
							"key": "age",
							"value": "40"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5. Статус код 200\r",
							"pm.test(\"Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"const responseData = pm.response.json()\r",
							"\r",
							"\r",
							"// 7. Спарсить request.\r",
							"const requestData = pm.request.url.query.toObject()\r",
							"\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Ответ содержит свойство START_QA_SALARY\", function () {\r",
							"    pm.expect(responseData).to.have.property('start_qa_salary')\r",
							"})\r",
							"\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Ответ содержит свойство QA_SALARY_AFTER_6_MONTHS\", function () {\r",
							"    pm.expect(responseData).to.have.property('qa_salary_after_6_months')\r",
							"})\r",
							"\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Ответ содержит свойство QA_SALARY_AFTER_12_MONTHS\", function () {\r",
							"    pm.expect(responseData).to.have.property('qa_salary_after_12_months')\r",
							"})\r",
							"\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Ответ содержит свойство QA_SALARY_AFTER_1.5_YEAR\", function () {\r",
							"    pm.expect(responseData).to.have.property('qa_salary_after_1.5_year')\r",
							"})\r",
							"\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Ответ содержит свойство QA_SALARY_AFTER_3.5_YEARS\", function () {\r",
							"    pm.expect(responseData).to.have.property('qa_salary_after_3.5_years')\r",
							"})\r",
							"\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Ответ содержит свойство PERSON\", function () {\r",
							"    pm.expect(responseData).to.have.property('person')\r",
							"})\r",
							"\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"В ответе значение свойства START_QA_SALARY равно значению свойства SALARY в запросе\", function () {\r",
							"    pm.expect(responseData.start_qa_salary).to.equal(Number(requestData.salary))\r",
							"})\r",
							"\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"В ответе значение свойства QA_SALARY_AFTER_6_MONTHS равно значению свойства SALARY*2 в запросе\", function () {\r",
							"    pm.expect(responseData.qa_salary_after_6_months).to.equal(Number(requestData.salary) * 2)\r",
							"})\r",
							"\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"В ответе значение свойства QA_SALARY_AFTER_12_MONTHS равно значению свойства SALARY*2.7 в запросе\", function () {\r",
							"    pm.expect(responseData.qa_salary_after_12_months).to.equal(Number(requestData.salary) * 2.7)\r",
							"})\r",
							"\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"В ответе значение свойства QA_SALARY_AFTER_1.5_YEAR равно значению свойства SALARY*3.3 в запросе\", function () {\r",
							"    pm.expect(responseData['qa_salary_after_1.5_year']).to.equal(Number(requestData.salary) * 3.3)\r",
							"})\r",
							"\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"В ответе значение свойства QA_SALARY_AFTER_3.5_YEARS равно значению свойства SALARY*3.8 в запросе\", function () {\r",
							"    pm.expect(responseData['qa_salary_after_3.5_years']).to.equal(Number(requestData.salary) * 3.8)\r",
							"})\r",
							"\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"В ответе значение первого элемента свойства U_NAME равно значению свойства SALARY в запросе\", function () {\r",
							"    pm.expect(responseData.person.u_name[1]).to.equal(Number(requestData.salary))\r",
							"})\r",
							"\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"В ответе значение свойства U_AGE свойства PERSON равно значению свойства AGE в запросе\", function () {\r",
							"    pm.expect(responseData.person.u_age).to.equal(Number(requestData.age))\r",
							"})\r",
							"\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"В ответе значение свойства U_SALARY_5_YEARDS свойства PERSON равно значению свойства SALARY*4.2 в запросе\", function () {\r",
							"    pm.expect(responseData.person.u_salary_5_years).to.equal(Number(requestData.salary) * 4.2)\r",
							"})\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"let person = responseData.person\r",
							"\r",
							"for (let personKey in person) {\r",
							"    console.log(personKey + ': ' + person[personKey])\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_2?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		}
	]
}